#!/bin/sh
#
# external_rules_command
#
# Absolute path to the command used to retrieve rule consequences.
# The command will receive the following arguments: window ID, class
# name, instance name, and intermediate consequences. The output of
# that command must have the following format: key1=value1
# key2=value2 ...  (the valid key/value pairs are given in the
# description of the rule command).
#
#
# Rule
#    General Syntax
# 	   rule COMMANDS
#
#    Commands
# 	   -a, --add (<class_name>|*)[:(<instance_name>|*)] [-o|--one-shot]
# 	   [monitor=MONITOR_SEL|desktop=DESKTOP_SEL|node=NODE_SEL]
# 	   [state=STATE] [layer=LAYER] [split_dir=DIR] [split_ratio=RATIO]
# 	   [(hidden|sticky|private|locked|marked|center|follow|manage|focus|border)=(on|off)]
# 	   [rectangle=WxH+X+Y]
# 		   Create a new rule.
#
# 	   -r, --remove
# 	   ^<n>|head|tail|(<class_name>|*)[:(<instance_name>|*)]...
# 		   Remove the given rules.
#
# 	   -l, --list
# 		   List the rules.

border='' \
center='' \
class=$2 \
desktop='' \
focus='' \
follow='' \
hidden='' \
id=${1?} \
instance=$3 \
layer='' \
locked='' \
manage='' \
marked='' \
misc=$4 \
monitor='' \
node='' \
private='' \
rectangle='' \
split_dir='' \
split_ratio='' \
state='' \
sticky='' \
urgent=


spotify() {
    desktop=9
}

chrome() {
    desktop=2
}

jetbrains_idea() {
    local name

    read -r _ _ name <<-IN
		$(xprop -id "$id" _NET_WM_NAME)
	IN

    case $name in
        '"Project - '*'"')
            split_ratio=0.25
            split_dir=west
            ;;
        '"Structure - '*'"')
            split_ratio=0.75
            split_dir=east
            ;;
    esac

    desktop=7
}

gimp() {
    state=floating
    follow=on
    desktop=8
}

plaxel() {
    state=floating
}

pavucontrol() {
    desktop=10
}

discord() {
    desktop=6
}

blueman() {
    desktop=10
    follow=on
}

jprofiler() {
    desktop=10
}



case $instance.$class in
    *.Gimp) gimp ;;
    *.Google-chrome) chrome ;;
    *.Spotify) spotify ;;
    *.Pavucontrol) pavucontrol ;;
    *.discord) discord ;;
    *.Blueman-manager) blueman ;;
    jetbrains-idea*.jetbrains-idea*) jetbrains_idea ;;
    *.*jetbrains-toolbox*) jetbrains_idea ;;
    *.*jprofiler*) jprofiler ;;
    *.Plaxel) plaxel ;;
    .)
        case $(exec ps -p "$(exec xdo pid "$id")" -o comm= 2>/dev/null) in
            spotify) spotify ;;
            *) exit 0 ;;
        esac
        ;;
esac


result=$(printf '%s ' \
    ${border:+"border=$border"} \
    ${center:+"center=$center"} \
    ${desktop:+"desktop=$desktop"} \
    ${focus:+"focus=$focus"} \
    ${follow:+"follow=$follow"} \
    ${hidden:+"hidden=$hidden"} \
    ${layer:+"layer=$layer"} \
    ${locked:+"locked=$locked"} \
    ${manage:+"manage=$manage"} \
    ${marked:+"marked=$marked"} \
    ${monitor:+"monitor=$monitor"} \
    ${node:+"node=$node"} \
    ${private:+"private=$private"} \
    ${rectangle:+"rectangle=$rectangle"} \
    ${split_dir:+"split_dir=$split_dir"} \
    ${split_ratio:+"split_ratio=$split_ratio"} \
    ${state:+"state=$state"} \
    ${sticky:+"sticky=$sticky"} \
    ${urgent:+"urgent=$urgent"})

userlog bspwm-rules "$1 $3.$2 ($4) $result"

echo "$result"

# vim: set ft=sh :
